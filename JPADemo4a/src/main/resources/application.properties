spring.application.name=JPADemo4a
# ================================
# = DATA SOURCE
# ================================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5469/petsdb
spring.datasource.username=admin
spring.datasource.password=admin
spring.datasource.driver-class-name=org.postgresql.Driver
# ================================
# = JPA / HIBERNATE
# ================================
# Show each sql statement created
spring.jpa.show-sql=true

# Hibernate DDL
spring.jpa.hibernate.ddl-auto=create
# Dev: create, update
# Test: create-drop
# Prod: validate, none


# JPA -> Java Persistence API

# Java Objects (Entities) can b linked to tables in a DB

# Important aspects:
# ORM -> Object-Relational-Mapping
#   - JPA enables mapping of Java classes directly to database tables.
#     Each instance of a class corresponds to a row in the DB table

# Annotations:
#   - JPA uses annotation to define the mapping between
#     Java classes an dDB tables

# Persistence context:
# - Tied to an Entity Manager
# - JPA uses a persistence context to ensure Java objects are
#   synchronized with DB records.
#   This helps to maintain the consistency of the application's data
# - Entity states: Transient, Managed, Detached, Removed
# - Interaction: Persist, Merge, Remove, Find/Get

# Queries:
# - JPA allows database queries using JPQL, which is object-oriented
#   and avoids direct SQL use

# Transactions:
# - JPA supports database transaction management to ensure
#   operations are executed reliably and securely

# Benefits of JPA:
# - Platform independence: JPA code is not tied to a specific DB
# - Productivity: Developers can focus on business logic without
#   worrying about SQL details
# - Flexibility: Support various DBs and is easy to adapt.

# Common implementations:
# - Hibernate (most popular)
# - EclipseLink
# - OpenJPA